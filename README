# iNaturalist Order / Family Counter

# Version 1.3

# By Alan Rockefeller - March 19, 2025

## Overview

inat.orders.py is a command-line utility designed to help researchers extract taxonomic information for observations from iNaturalist. This information is useful when applying for a transportation permit to get specimens into a herbarium in Ecuador, and for summarizing information from iNaturalist observations for scientific papers.  It retrieves the taxonomic order and family (optional) for given observation IDs, while implementing responsible API access with rate limiting and retry logic.

It can also do a similar analysis on the usernames associated with iNaturalist observations - this is designed to be able to make a list of people to thank for sending in samples.

## Sample output

This is the output I generated using this code - it is going to be included in a new paper by the Ohio Mushroom DNA Lab.

https://images.mushroomobserver.org/obs.with.families.out.txt

I made it by running:  

alan@Dell-9700 ~/inat.orders.py (test)> python3 inat.orders.py --family (over 300 of iNaturalist numbers here) > obs.with.families.out.txt


## Features

- **Taxonomic Information Retrieval**: Extract order and family information from iNaturalist observation IDs
- **Large runs are ok!**: Even large numbers of iNaturalist numbers can be processed into reports with this code
- **Batch Processing**: Efficiently processes observations in batches of up to 200 records per API call
- **Progress Bars**: Displays progress bars when processing large datasets (>100 observations)
- **Smart Rate Limiting / Retries**: Respects iNaturalist API rate limits to prevent request throttling
- **Output to File**: Easily save results to a file with the --outfile option
- **Hierarchical Summaries**: Provides summaries of orders and optionally families within orders when processing multiple observations
- **Flexible Output Options**: Customize the level of taxonomic detail and debugging information
- **Count users**: Record who is making these observations
- **File input**: Can take input iNaturalist observation numbers on the command line, or in a file (one observation per line)


## Installation

### Prerequisites

- Python 3.6 or higher
- pip (Python package installer)

### Setup

1. Clone this repository:
   ```bash
   git clone https://github.com/yourusername/inat.orders.py.git
   cd inat.orders.py
   ```

2. Install the required dependencies:
   ```bash
   pip install requests
   ```

## Usage

### Basic Usage

To look up the order for a single iNaturalist observation:

```bash
python3 inat.orders.py 135240378
```

For multiple observations, with family information

```bash
python3 inat.orders.py --family 262201758 262274361 261937401 261862641 262201653
```

### Command Line Arguments

| Argument | Description |
|----------|-------------|
| `observation_ids` | One or more iNaturalist observation IDs (required) |
| `--family` | Include family taxonomic rank in the output and summaries |
| `--delay DELAY` | Minimum delay in seconds between API calls (default: 1.0) |
| `--max-delay MAX_DELAY` | Maximum delay between API calls when rate limited (default: 10.0) |
| `--retry-delay RETRY_DELAY` | Initial retry delay in seconds (default: 5.0) |
| `--retries RETRIES` | Maximum number of retry attempts (default: 5) |
| `--batch-size BATCH_SIZE` | Number of observations to fetch in a single API call (default: 200, max: 200) |
| `--no-batch` | Disable batch processing and fetch observations one at a time |
| `-o`, `--outfile`, `--out` | Write output to the specified file instead of stdout |
| `--count-api-calls` | Print the total number of API calls made |
| `--debug` | Enable debug output for rate limiting and API calls |

### Examples

**Basic lookup with order information only:**
```bash
python taxa_lookup.py 12345678 23456789 34567890
```

**Include family taxonomic rank:**
```bash
python taxa_lookup.py 12345678 23456789 34567890 --family
```

**Increase the delay between API calls to 2 seconds:**
```bash
python taxa_lookup.py 12345678 23456789 34567890 --delay 2.0
```

**Show API call count and debug information:**
```bash
python3 inat.orders.py 12345678 23456789 34567890 --count-api-calls --debug
```

**Output results to a file:**
```bash
python3 inat.orders.py 12345678 23456789 34567890 -o results.txt
```

**Process a large dataset with progress bar:**
```bash
python3 inat.orders.py --file large_list_of_observations.txt
```

## Output Format

### Single Observation (Order Only)
```
12345678: Agaricales
```

### Single Observation (With Family)
```
12345678: Order: Agaricales Family: Amanitaceae
```

### Multiple Observations (With Order Summary)
```
12345678: Agaricales
23456789: Russulales
34567890: Agaricales

Summary by Order:
     2  Agaricales
     1  Russulales
```

### Multiple Observations (With Order and Family Summaries)
```
12345678: Order: Agaricales Family: Amanitaceae
23456789: Order: Russulales Family: Russulaceae
34567890: Order: Agaricales Family: Psathyrellaceae

Summary by Order:
     2  Agaricales
     1  Russulales

Families within Agaricales:
     1  Amanitaceae
     1  Psathyrellaceae

Families within Russulales:
     1  Russulaceae
```

## How It Works

1. **API Request Management**: The `RateLimiter` class ensures that requests to the iNaturalist API respect rate limits by enforcing a minimum delay between consecutive requests.

2. **Taxonomic Information Retrieval**: For each observation ID:
   - The tool first requests basic observation data from the iNaturalist API
   - It extracts the taxon information from the response
   - If the taxon is not already at the order level (or family level when requested), it traverses the ancestry chain to find the appropriate taxonomic ranks
   - For efficiency, it makes additional API calls only when necessary to retrieve missing taxonomic information

3. **Summary Generation**: When processing multiple observations:
   - The tool counts occurrences of each order
   - When the `--family` flag is provided, it also organizes families within their respective orders
   - The summary is sorted by frequency (most common first)
   - Unknown or error cases are tracked separately

## Advanced Usage

### Processing Observation IDs from a File

You can process a list of observation IDs from a file using shell input redirection:

```bash
python taxa_lookup.py $(cat observation_ids.txt) --family
```

Or using `xargs`:

```bash
cat observation_ids.txt | xargs python taxa_lookup.py --family
```

### Redirecting Output to a File

Save the output to a file:

```bash
python taxa_lookup.py 12345678 23456789 34567890 --family > taxonomy_report.txt
```

### Processing Large Sets of Observations

When working with large datasets (thousands of observations), consider using the batch processing features:

```bash
python3 inat.orders.py $(cat large_dataset.txt) --batch-size 200 --delay 2.0
```

This will:
- Process observations in batches of up to 200 per API call (the maximum allowed)
- Use a 2-second delay between API requests to avoid rate limiting

### Handling Rate Limits

If you hit rate limits (429 errors), the tool will automatically:
1. Retry with exponential backoff
2. Save failed observation IDs to a file for later retry
3. Adjust request delays to avoid further rate limiting

To optimize for rate limit handling:

```bash
python taxa_lookup.py $(cat observations.txt) --delay 2.0 --retries 10 --retry-delay 10.0
```

### Disabling Batch Processing

If you prefer to process observations one at a time (e.g., for debugging):

```bash
python3 inat.orders.py $(cat observation_ids.txt) --no-batch
```

### Error Handling

When taxonomic information cannot be retrieved, the tool provides informative error messages:

```
12345678: Error - No results found
23456789: Class: Magnoliopsida
34567890: Error - API request failed: 404 Client Error: Not Found
```

Failed observations are saved to a timestamped file (e.g., `failed_observations_1616161616.txt`) that you can use for later retry attempts.

## API Rate Limits and Responsible Usage

This tool is designed to be respectful of iNaturalist's API rate limits. By default, it waits 1 second between API calls, which should be sufficient for most use cases. For larger batch processing, consider increasing the delay using the `--delay` parameter.

iNaturalist's API documentation states that:
- You should not make more than 100 requests per minute
- You should respect HTTP 429 responses by backing off (this tool implements exponential backoff)

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- [iNaturalist](https://www.inaturalist.org/) for providing the API that makes this tool possible
- The global community of naturalists and citizen scientists who contribute observations to iNaturalist

## Contact

If you have any questions or feedback, please open an issue on this repository or email Alan Rockefeller.

## Donations

If you like this tool, please consider making a donation to the Ohio Mushroom DNA Lab.
https://www.ohiomushroomdnalab.com/donate

